name: Kernel CI

# Controls when the action will run.
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches:
      # TODO: Get rid of this, only run upon pull requests
      - 71r1-github-actions
  pull_request:
    branches:
      - aosp/LA.UM.7.1.r1

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  # https://docs.github.com/en/actions/reference/workflow-syntax-for-github-actions#jobsjob_idcontainer
  kernel:
    strategy:
      fail-fast: false # Do not stop build if one matrix strand fails
      matrix:
        device:
          #- akari
          - apollo
          - akatsuki
    runs-on: ubuntu-20.04
    container:
      image: ghcr.io/ix5/kernel-base
    env:
      GIT_CLONE: "git clone --single-branch --depth=1"
      REMOTE: "https://github.com/sonyxperiadev"
      BASEDIR: "/srv/android"
      KERNEL_VERSION: "4.14"
      KERNEL_BASEDIR: "/srv/android/kernel/sony/msm-4.14"
      ANDROID_BUILD_TOP: "/srv/android"
    steps:
      - uses: actions/checkout@v2
        with:
          path: kernel

      # BROKEN wtf github
      #- uses: actions/cache@v2
      #  id: cache_repos
      #  name: Cache/Restore cloned dirs
      #  with:
      #    path: |
      #      $GITHUB_WORKSPACE/common-headers
      #      $GITHUB_WORKSPACE/kernel/techpack/audio
      #      $GITHUB_WORKSPACE/kernel/techpack/data-kernel
      #      $GITHUB_WORKSPACE/kernel/arch/arm64/configs/sony
      #      $GITHUB_WORKSPACE/kernel/drivers/staging/wlan-qc/fw-api
      #      $GITHUB_WORKSPACE/kernel/drivers/staging/wlan-qc/qca-wifi-host-cmn
      #      $GITHUB_WORKSPACE/kernel/drivers/staging/wlan-qc/qcacld-3.0
      #    key: kernel-repos-4.14-v2

      - uses: actions/cache@v2
        id: cache_output
        name: Cache/Restore kernel tmp
        with:
          path: |
            ${{ env.BASEDIR }}/out/kernel-${{ env.KERNEL_VERSION }}/clang
            #- $BASEDIR/out/kernel-414/clang/${{ matrix.device }}
          key: kernel-tmp-${{ env.KERNEL_VERSION }}-sha-${{ github.sha }}
          #key: kernel-tmp-$KERNEL_VERSION-${{ matrix.device }}
          restore-keys: |
            kernel-tmp-${{ env.KERNEL_VERSION }}-sha-

      - name: ls restored kernel dirs
        continue-on-error: true
        run: |
          ls -la $BASEDIR/out/
          ls -la $BASEDIR/out/kernel-$KERNEL_VERSION/clang
          # Let wildcard be interpreted by target shell:
          /bin/bash 'ls -la $BASEDIR/out/kernel-4.14/clang/*'

      - name: Clone repos
        #if: steps.cache_repos.outputs.cache-hit != 'true'
        #continue-on-error: true
        run: |
          mkdir -p $KERNEL_BASEDIR/
          $GIT_CLONE $REMOTE/device-sony-common-headers $KERNEL_BASEDIR/common-headers -b aosp/LA.UM.7.1.r1
          # Clone submodules into workspace kernel dir first and then move whole kernel dir
          # Need to remove existing dir
          rm -rf $GITHUB_WORKSPACE/kernel/techpack/audio
          $GIT_CLONE $REMOTE/kernel-techpack-audio $GITHUB_WORKSPACE/kernel/techpack/audio -b aosp/LA.UM.7.1.r1
          $GIT_CLONE $REMOTE/kernel-techpack-data-kernel $GITHUB_WORKSPACE/kernel/techpack/data-kernel -b aosp/LA.UM.7.1.r1
          $GIT_CLONE $REMOTE/kernel-defconfig $GITHUB_WORKSPACE/kernel/arch/arm64/configs/sony -b aosp/LA.UM.7.1.r1
          $GIT_CLONE $REMOTE/vendor-qcom-opensource-wlan-fw-api $GITHUB_WORKSPACE/kernel/drivers/staging/wlan-qc/fw-api -b aosp/LA.UM.8.1.r1
          $GIT_CLONE $REMOTE/vendor-qcom-opensource-wlan-qca-wifi-host-cmn $GITHUB_WORKSPACE/kernel/drivers/staging/wlan-qc/qca-wifi-host-cmn -b aosp/LA.UM.8.1.r1
          $GIT_CLONE $REMOTE/vendor-qcom-opensource-wlan-qcacld-3.0 $GITHUB_WORKSPACE/kernel/drivers/staging/wlan-qc/qcacld-3.0 -b aosp/LA.UM.8.1.r1

      - name: Clone out-of-tree scripts
        run: git clone https://github.com/ix5/oot $BASEDIR/oot -b shared-tmp

      #- name: Pull latest for repos
      #  env:
      #    GIT_FETCH: "git fetch origin"
      #    GIT_RESET: "git reset --hard"
      #  run: |
      #    cd $GITHUB_WORKSPACE/common-headers && $GIT_FETCH aosp/LA.UM.7.1.r1 && $GIT_RESET origin/aosp/LA.UM.7.1.r1
      #    cd $GITHUB_WORKSPACE/kernel/techpack/audio && $GIT_FETCH aosp/LA.UM.7.1.r1 && $GIT_RESET origin/aosp/LA.UM.7.1.r1
      #    cd $GITHUB_WORKSPACE/kernel/techpack/data-kernel && $GIT_FETCH aosp/LA.UM.7.1.r1 && $GIT_RESET origin/aosp/LA.UM.7.1.r1
      #    cd $GITHUB_WORKSPACE/kernel/arch/arm64/configs/sony && $GIT_FETCH aosp/LA.UM.7.1.r1 && $GIT_RESET origin/aosp/LA.UM.7.1.r1
      #    cd $GITHUB_WORKSPACE/kernel/drivers/staging/wlan-qc/fw-api && $GIT_FETCH aosp/LA.UM.8.1.r1 && $GIT_RESET origin/aosp/LA.UM.8.1.r1
      #    cd $GITHUB_WORKSPACE/kernel/drivers/staging/wlan-qc/qca-wifi-host-cmn && $GIT_FETCH aosp/LA.UM.8.1.r1 && $GIT_RESET origin/aosp/LA.UM.8.1.r1
      #    cd $GITHUB_WORKSPACE/kernel/drivers/staging/wlan-qc/qcacld-3.0 && $GIT_FETCH aosp/LA.UM.8.1.r1 && $GIT_RESET origin/aosp/LA.UM.8.1.r1

      - name: Clone ramdisk images
        # sodp-ramdisks contains following structure:
        # | sodp-ramdisks (as "product")
        # |-- apollo
        #     |-- ramdisk.img
        #     | - ramdisk-recovery.img
        run: |
          mkdir -p $BASEDIR/out/target
          rm -rf $BASEDIR/out/target/product
          git clone https://github.com/ix5/sodp-ramdisks -b aosp-10 $BASEDIR/out/target/product

      - name: Copy checked out repo to /srv/android
        # Using copy instead of move so that cache hits on $GITHUB_WORKSPACE/kernel can occur
        run: cp -r $GITHUB_WORKSPACE/kernel/ $KERNEL_BASEDIR/kernel

      # TEMP until image is rebuilt
      #- name: TEMP Install python
      #  run: apt install -y python

      - name: Run kernel CI script
        continue-on-error: true
        run: |
            cd /srv/android/oot/
            /srv/android/oot/oot.sh -s ${{ matrix.device }}
        shell: bash

      - name: Archive kernel images
        uses: actions/upload-artifact@v2
        with:
          name: boot-images
          path: /srv/android/oot/*-boot.img

      - name: Archive dtbos
        uses: actions/upload-artifact@v2
        with:
          name: kernel-dtbos
          path: /srv/android/oot/*-dtbo.img

